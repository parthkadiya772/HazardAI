{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHREE\\\\Documents\\\\AI and Automation\\\\Sem 3\\\\MAI\\\\Project\\\\Project\\\\HazardAI\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button } from \"./components/ui/button\";\nimport { Input } from \"./components/ui/input\";\nimport { Label } from \"./components/ui/label\";\nimport { Textarea } from \"./components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./components/ui/card\";\n\n// Define the Hazard type \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Placeholder function to interact with LLAMA\nconst generateMitigations = async hazard => {\n  // Replace this with actual API call to LLAMA\n  return `Mitigation for ${hazard.type}: Follow standard safety protocols and use appropriate PPE.`;\n};\nconst HazardDetection = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [jsonData, setJsonData] = useState(null);\n  const [hazards, setHazards] = useState([]);\n  const [safetyText, setSafetyText] = useState(\"\");\n  const [mitigations, setMitigations] = useState([]);\n  const [showJsonContext, setShowJsonContext] = useState(false);\n  const handleFileChange = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0]; // Optional chaining in case no file is selected\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = loadEvent => {\n        try {\n          var _loadEvent$target;\n          const json = JSON.parse((_loadEvent$target = loadEvent.target) === null || _loadEvent$target === void 0 ? void 0 : _loadEvent$target.result); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0]; // Access the first file\n    if (file.type === \"application/json\") {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = loadEvent => {\n        try {\n          var _loadEvent$target2;\n          const json = JSON.parse((_loadEvent$target2 = loadEvent.target) === null || _loadEvent$target2 === void 0 ? void 0 : _loadEvent$target2.result); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    } else {\n      console.error(\"Only JSON files are accepted\");\n    }\n  };\n  const detectHazards = (data, keyConfig) => {\n    const hazards = [];\n    const recursiveDetect = (obj, path = \"\") => {\n      if (typeof obj !== \"object\" || obj === null) return;\n\n      // Check if the object contains \"Properties\" field with hazard-related properties\n      if (Array.isArray(obj.Properties)) {\n        const hazard = {\n          type: \"\",\n          riskLevel: \"\",\n          targetType: \"\",\n          description: \"\",\n          path\n        };\n        obj.Properties.forEach(property => {\n          const [key, value] = property;\n\n          // Extract hazard-related fields from \"Properties\"\n          if (key === \"Type\" && value.LocalValue) {\n            hazard.type = value.LocalValue;\n          }\n          if (key === \"Risk\" && value.LocalValue) {\n            hazard.riskLevel = value.LocalValue;\n          }\n          if (key === \"TargetType\" && value.LocalValue) {\n            hazard.targetType = value.LocalValue;\n          }\n          if (key === \"Description\" && value.LocalValue) {\n            hazard.description = value.LocalValue;\n          }\n        });\n\n        // Add the hazard if type is identified\n        if (hazard.type) {\n          hazards.push(Hazard);\n        }\n      }\n\n      // Recursively go through other properties\n      Object.keys(obj).forEach(key => {\n        const newPath = path ? `${path}.${key}` : key;\n        recursiveDetect(obj[key], newPath);\n      });\n    };\n    recursiveDetect(data);\n    return hazards;\n  };\n  const defaultKeyConfig = {\n    types: [\"Type\"],\n    typeKeys: [\"Name\", \"Type\"],\n    messageKeys: [\"Message\", \"Description\"],\n    riskKeys: [\"RiskLevel\", \"Severity\"]\n  };\n  const handleDetectHazards = () => {\n    if (jsonData) {\n      const detectedHazards = detectHazards(jsonData, defaultKeyConfig); // Pass the updated configuration\n      setHazards(detectedHazards);\n      const safetyText = detectedHazards.map((hazard, index) => `${index + 1} - ${hazard.type}:\\n  - ${hazard.message}`).join(\"\\n\\n\");\n      setSafetyText(safetyText);\n    }\n  };\n  const handleGenerateMitigations = async () => {\n    const mitigationsList = await Promise.all(hazards.map(async hazard => {\n      const mitigation = await generateMitigations(hazard);\n      return `${hazard.type}: ${mitigation}`;\n    }));\n    setMitigations(mitigationsList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"JSON Data Analysis for Hazard Detection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: \"Upload a JSON file to analyze and generate safety texts for automatic hazard detection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-dashed rounded-xl p-4\",\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: \"Drag and drop a JSON file or upload from device\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"file\",\n            onChange: handleFileChange,\n            accept: \".json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setShowJsonContext(!showJsonContext),\n            children: showJsonContext ? \"Hide JSON Context\" : \"View JSON Context\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), showJsonContext && /*#__PURE__*/_jsxDEV(Textarea, {\n            value: JSON.stringify(jsonData, null, 2),\n            readOnly: true,\n            className: \"mt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), jsonData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleDetectHazards,\n            children: \"Detect Hazards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), safetyText && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-bold\",\n              children: \"Detected Hazards:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: safetyText,\n              readOnly: true,\n              className: \"mt-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), hazards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleGenerateMitigations,\n            children: \"Generate Mitigations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), mitigations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-bold\",\n              children: \"Generated Mitigations:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: mitigations.join(\"\\n\\n\"),\n              readOnly: true,\n              className: \"mt-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(HazardDetection, \"QtWkstLvLJl2aMjKv1dQCmzZRYs=\");\n_c = HazardDetection;\nexport default HazardDetection;\nvar _c;\n$RefreshReg$(_c, \"HazardDetection\");","map":{"version":3,"names":["React","useState","Button","Input","Label","Textarea","Card","CardContent","CardDescription","CardHeader","CardTitle","jsxDEV","_jsxDEV","generateMitigations","hazard","type","HazardDetection","_s","selectedFile","setSelectedFile","jsonData","setJsonData","hazards","setHazards","safetyText","setSafetyText","mitigations","setMitigations","showJsonContext","setShowJsonContext","handleFileChange","event","_event$target$files","file","target","files","reader","FileReader","onload","loadEvent","_loadEvent$target","json","JSON","parse","result","console","log","error","readAsText","handleDragOver","preventDefault","handleDrop","dataTransfer","_loadEvent$target2","detectHazards","data","keyConfig","recursiveDetect","obj","path","Array","isArray","Properties","riskLevel","targetType","description","forEach","property","key","value","LocalValue","push","Hazard","Object","keys","newPath","defaultKeyConfig","types","typeKeys","messageKeys","riskKeys","handleDetectHazards","detectedHazards","map","index","message","join","handleGenerateMitigations","mitigationsList","Promise","all","mitigation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","onDrop","onChange","accept","onClick","stringify","readOnly","length","_c","$RefreshReg$"],"sources":["C:/Users/SHREE/Documents/AI and Automation/Sem 3/MAI/Project/Project/HazardAI/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"./components/ui/button\";\nimport { Input } from \"./components/ui/input\";\nimport { Label } from \"./components/ui/label\";\nimport { Textarea } from \"./components/ui/textarea\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"./components/ui/card\";\n\n\n// Define the Hazard type \ntype Hazard = { \n  type: string;\n  message: string;\n  riskLevel: string;\n  path: string;\n};\n// Placeholder function to interact with LLAMA\nconst generateMitigations = async (hazard: Hazard) => {\n  // Replace this with actual API call to LLAMA\n  return `Mitigation for ${hazard.type}: Follow standard safety protocols and use appropriate PPE.`;\n};\n\nconst HazardDetection = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [jsonData, setJsonData] = useState(null);\n  const [hazards, setHazards] = useState<Hazard[]>([]);\n  const [safetyText, setSafetyText] = useState(\"\");\n  const [mitigations, setMitigations] = useState<string[]>([]);\n  const [showJsonContext, setShowJsonContext] = useState(false);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]; // Optional chaining in case no file is selected\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = (loadEvent) => {\n        try {\n          const json = JSON.parse(loadEvent.target?.result as string); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  \n\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n  };\n  \n\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0]; // Access the first file\n    if (file.type === \"application/json\") {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = (loadEvent) => {\n        try {\n          const json = JSON.parse(loadEvent.target?.result as string); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    } else {\n      console.error(\"Only JSON files are accepted\");\n    }\n  };\n  \n\n  type KeyConfig = {\n    types: string[]; // Multiple potential type keys\n    typeKeys: string[]; // Multiple keys for the type (e.g., \"Name\", \"Type\")\n    messageKeys: string[]; // Multiple keys for message (e.g., \"Message\", \"Description\")\n    riskKeys: string[]; // Multiple keys for risk (e.g., \"RiskLevel\", \"Severity\")\n    [key: string]: string[]; // Allow for additional keys if needed\n  };\n  \n  \n  const detectHazards = (data: any, keyConfig: KeyConfig) => {\n    const hazards: Hazard[] = [];\n  \n    const recursiveDetect = (obj: any, path = \"\") => {\n      if (typeof obj !== \"object\" || obj === null) return;\n  \n      // Check if the object contains \"Properties\" field with hazard-related properties\n      if (Array.isArray(obj.Properties)) {\n        const hazard = {\n          type: \"\",\n          riskLevel: \"\",\n          targetType: \"\",\n          description: \"\",\n          path,\n        };\n\n        obj.Properties.forEach((property: any) => {\n          const [key, value] = property;\n\n          // Extract hazard-related fields from \"Properties\"\n          if (key === \"Type\" && value.LocalValue) {\n            hazard.type = value.LocalValue;\n          }\n          if (key === \"Risk\" && value.LocalValue) {\n            hazard.riskLevel = value.LocalValue;\n          }\n          if (key === \"TargetType\" && value.LocalValue) {\n            hazard.targetType = value.LocalValue;\n          }\n          if (key === \"Description\" && value.LocalValue) {\n            hazard.description = value.LocalValue;\n          }\n        });\n\n        // Add the hazard if type is identified\n        if (hazard.type) {\n          hazards.push(Hazard);\n        }\n      }\n\n      // Recursively go through other properties\n      Object.keys(obj).forEach((key) => {\n        const newPath = path ? `${path}.${key}` : key;\n        recursiveDetect(obj[key], newPath);\n      });\n    };\n\n    recursiveDetect(data);\n    return hazards;\n  };\n  \n  \n  const defaultKeyConfig = {\n    types: [\"Type\"],\n    typeKeys: [\"Name\", \"Type\"],\n    messageKeys: [\"Message\", \"Description\"],\n    riskKeys: [\"RiskLevel\", \"Severity\"],\n  };\n  \n  const handleDetectHazards = () => {\n    if (jsonData) {\n      const detectedHazards = detectHazards(jsonData, defaultKeyConfig); // Pass the updated configuration\n      setHazards(detectedHazards);\n  \n      const safetyText = detectedHazards\n        .map(\n          (hazard, index) =>\n            `${index + 1} - ${hazard.type}:\\n  - ${hazard.message}`\n        )\n        .join(\"\\n\\n\");\n      setSafetyText(safetyText);\n    }\n  };\n\n  const handleGenerateMitigations = async () => {\n    const mitigationsList = await Promise.all(\n      hazards.map(async (hazard) => {\n        const mitigation = await generateMitigations(hazard);\n        return `${hazard.type}: ${mitigation}`;\n      })\n    );\n    setMitigations(mitigationsList);\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>JSON Data Analysis for Hazard Detection</CardTitle>\n          <CardDescription>\n            Upload a JSON file to analyze and generate safety texts for\n            automatic hazard detection.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div\n            className=\"border-2 border-dashed rounded-xl p-4\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n          >\n            <Label>Drag and drop a JSON file or upload from device</Label>\n            <Input type=\"file\" onChange={handleFileChange} accept=\".json\" />\n          </div>\n          {selectedFile && (\n            <div className=\"mt-4\">\n              <Button onClick={() => setShowJsonContext(!showJsonContext)}>\n                {showJsonContext ? \"Hide JSON Context\" : \"View JSON Context\"}\n              </Button>\n              {showJsonContext && (\n                <Textarea\n                  value={JSON.stringify(jsonData, null, 2)}\n                  readOnly\n                  className=\"mt-4\"\n                />\n              )}\n            </div>\n          )}\n          {jsonData && (\n            <div className=\"mt-4\">\n              <Button onClick={handleDetectHazards}>Detect Hazards</Button>\n              {safetyText && (\n                <div className=\"mt-4\">\n                  <h2 className=\"text-lg font-bold\">Detected Hazards:</h2>\n                  <Textarea value={safetyText} readOnly className=\"mt-4\" />\n                </div>\n              )}\n            </div>\n          )}\n          {hazards.length > 0 && (\n            <div className=\"mt-4\">\n              <Button onClick={handleGenerateMitigations}>\n                Generate Mitigations\n              </Button>\n              {mitigations.length > 0 && (\n                <div className=\"mt-4\">\n                  <h2 className=\"text-lg font-bold\">Generated Mitigations:</h2>\n                  <Textarea\n                    value={mitigations.join(\"\\n\\n\")}\n                    readOnly\n                    className=\"mt-4\"\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default HazardDetection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}