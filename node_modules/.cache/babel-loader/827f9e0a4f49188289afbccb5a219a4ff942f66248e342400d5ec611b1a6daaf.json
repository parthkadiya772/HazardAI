{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHREE\\\\Documents\\\\AI and Automation\\\\Sem 3\\\\MAI\\\\Project\\\\Project\\\\HazardAI\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button } from \"./components/ui/button\";\nimport { Input } from \"./components/ui/input\";\nimport { Label } from \"./components/ui/label\";\nimport { Textarea } from \"./components/ui/textarea\";\nimport axios from 'axios';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"./components/ui/card\";\n\n// Define the Hazard type \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateMitigations = async hazard => {\n  try {\n    console.log('Sending request to generate mitigation for:', hazard.description);\n    const response = await axios.post('http://localhost:5000/generate', {\n      text: hazard.description\n    });\n    console.log('Received response:', response.data);\n    return response.data.response;\n  } catch (error) {\n    console.error('Error generating mitigations:', error);\n    return 'Error generating mitigation.';\n  }\n};\nconst HazardDetection = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [jsonData, setJsonData] = useState(null);\n  const [hazards, setHazards] = useState([]);\n  const [safetyText, setSafetyText] = useState(\"\");\n  const [mitigations, setMitigations] = useState([]);\n  const [showJsonContext, setShowJsonContext] = useState(false);\n  const handleFileChange = event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0]; // Optional chaining in case no file is selected\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = loadEvent => {\n        try {\n          var _loadEvent$target;\n          const json = JSON.parse((_loadEvent$target = loadEvent.target) === null || _loadEvent$target === void 0 ? void 0 : _loadEvent$target.result); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0]; // Access the first file\n    if (file.type === \"application/json\") {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = loadEvent => {\n        try {\n          var _loadEvent$target2;\n          const json = JSON.parse((_loadEvent$target2 = loadEvent.target) === null || _loadEvent$target2 === void 0 ? void 0 : _loadEvent$target2.result); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    } else {\n      console.error(\"Only JSON files are accepted\");\n    }\n  };\n  const detectHazards = data => {\n    const hazards = [];\n    const stack = [{\n      obj: data,\n      path: \"\"\n    }]; // Stack for deep traversal\n\n    // Traverse the object tree\n    while (stack.length > 0) {\n      const {\n        obj,\n        path\n      } = stack.pop(); // Get current object and path\n\n      if (typeof obj !== \"object\" || obj === null) continue;\n      Object.keys(obj).forEach(key => {\n        const newPath = path ? `${path}.${key}` : key; // Construct new path for the object\n\n        // Check if we are at the \"Relations\" array\n        if (key.toLowerCase() === \"relations\" && Array.isArray(obj[key])) {\n          obj[key].forEach((relation, index) => {\n            var _relation$;\n            // Look for \"Hazards\" in the relations\n            if (relation[0] === \"Hazards\" && (_relation$ = relation[1]) !== null && _relation$ !== void 0 && _relation$.Properties) {\n              console.log(`Found Hazards at path: ${newPath}.Relations[${index}]`);\n\n              // Extract the Properties array\n              const properties = relation[1].Properties;\n\n              // Initialize a new hazard object with default values\n              const hazard = {\n                path: `${newPath}.Relations[${index}].Hazards`,\n                name: \"\",\n                type: \"\",\n                description: \"\",\n                riskLevel: \"\",\n                targetType: \"\"\n              };\n\n              // Loop through the properties array to extract hazard details\n              properties.forEach(property => {\n                const [propertyKey, propertyValue] = property;\n                if (propertyValue && propertyValue.LocalValue) {\n                  // Extract LocalValue for each key in the Properties array\n                  if (propertyKey === \"Name\") {\n                    hazard.name = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Description\") {\n                    hazard.description = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Type\") {\n                    hazard.type = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Risk\") {\n                    hazard.riskLevel = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"TargetType\") {\n                    hazard.targetType = propertyValue.LocalValue;\n                  }\n                  // Log the property and its LocalValue for debugging\n                  console.log(`Key: ${propertyKey}, LocalValue: ${propertyValue.LocalValue}`);\n                }\n              });\n\n              // Add the hazard to the array\n              hazards.push(hazard);\n            }\n          });\n        }\n\n        // Continue traversing if object or array found\n        if (typeof obj[key] === \"object\" && obj[key] !== null) {\n          stack.push({\n            obj: obj[key],\n            path: newPath\n          });\n        }\n      });\n    }\n\n    // Debugging the output to inspect the result\n    console.log(\"Detected Hazards with Detailed Information:\");\n    hazards.forEach(hazard => {\n      console.log(`Hazard Path: ${hazard.path}`);\n      console.log(`Name: ${hazard.name}`);\n      console.log(`Type: ${hazard.type}`);\n      console.log(`Description: ${hazard.description}`);\n      console.log(`Risk Level: ${hazard.riskLevel}`);\n      console.log(`Target Type: ${hazard.targetType}`);\n      console.log('---'); // Separator between hazards\n    });\n    return hazards;\n  };\n  const handleDetectHazards = () => {\n    if (jsonData) {\n      const detectedHazards = detectHazards(jsonData); // Pass the updated configuration\n      setHazards(detectedHazards);\n      const safetyText = detectedHazards.map((hazard, index) => `${index + 1} - ${hazard.type}:\\n  - ${hazard.description}`).join(\"\\n\\n\");\n      setSafetyText(safetyText);\n    }\n  };\n  const handleGenerateMitigations = async () => {\n    const mitigationsList = await Promise.all(hazards.map(async hazard => {\n      const mitigation = await generateMitigations(hazard);\n      return `${hazard.type}: ${mitigation}`;\n    }));\n    setMitigations(mitigationsList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"JSON Data Analysis for Hazard Detection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardDescription, {\n          children: \"Upload a JSON file to analyze and generate safety texts for automatic hazard detection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-dashed rounded-xl p-4\",\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: \"Drag and drop a JSON file or upload from device\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"file\",\n            onChange: handleFileChange,\n            accept: \".json\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setShowJsonContext(!showJsonContext),\n            children: showJsonContext ? \"Hide JSON Context\" : \"View JSON Context\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), showJsonContext && /*#__PURE__*/_jsxDEV(Textarea, {\n            value: JSON.stringify(jsonData, null, 2),\n            readOnly: true,\n            className: \"mt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), jsonData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleDetectHazards,\n            children: \"Detect Hazards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), safetyText && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: \"20px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-bold\",\n              children: \"Detected Hazards:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: safetyText,\n              readOnly: true,\n              style: {\n                width: \"50%\",\n                height: \"150px\",\n                padding: \"10px\",\n                fontSize: \"18px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), hazards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleGenerateMitigations,\n            children: \"Generate Mitigations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), mitigations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-lg font-bold\",\n              children: \"Generated Mitigations:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n              value: mitigations.join(\"\\n\\n\"),\n              readOnly: true,\n              className: \"mt-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(HazardDetection, \"QtWkstLvLJl2aMjKv1dQCmzZRYs=\");\n_c = HazardDetection;\nexport default HazardDetection;\nvar _c;\n$RefreshReg$(_c, \"HazardDetection\");","map":{"version":3,"names":["React","useState","Button","Input","Label","Textarea","axios","Card","CardContent","CardDescription","CardHeader","CardTitle","jsxDEV","_jsxDEV","generateMitigations","hazard","console","log","description","response","post","text","data","error","HazardDetection","_s","selectedFile","setSelectedFile","jsonData","setJsonData","hazards","setHazards","safetyText","setSafetyText","mitigations","setMitigations","showJsonContext","setShowJsonContext","handleFileChange","event","_event$target$files","file","target","files","reader","FileReader","onload","loadEvent","_loadEvent$target","json","JSON","parse","result","readAsText","handleDragOver","preventDefault","handleDrop","dataTransfer","type","_loadEvent$target2","detectHazards","stack","obj","path","length","pop","Object","keys","forEach","key","newPath","toLowerCase","Array","isArray","relation","index","_relation$","Properties","properties","name","riskLevel","targetType","property","propertyKey","propertyValue","LocalValue","push","handleDetectHazards","detectedHazards","map","join","handleGenerateMitigations","mitigationsList","Promise","all","mitigation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","onDrop","onChange","accept","onClick","value","stringify","readOnly","style","marginTop","width","height","padding","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/SHREE/Documents/AI and Automation/Sem 3/MAI/Project/Project/HazardAI/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"./components/ui/button\";\nimport { Input } from \"./components/ui/input\";\nimport { Label } from \"./components/ui/label\";\nimport { Textarea } from \"./components/ui/textarea\";\nimport axios from 'axios';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"./components/ui/card\";\n\n\n// Define the Hazard type \ntype Hazard = { \n  name: string;\n  type: string;\n  description: string;\n  riskLevel: string;\n  targetType: string;\n  path: string;\n};\n\nconst generateMitigations = async (hazard: Hazard) => {\n  try {\n    console.log('Sending request to generate mitigation for:', hazard.description);\n    const response = await axios.post('http://localhost:5000/generate', {\n      text: hazard.description\n    });\n    console.log('Received response:', response.data);\n    return response.data.response;\n  } catch (error) {\n    console.error('Error generating mitigations:', error);\n    return 'Error generating mitigation.';\n  }\n};\n\n\nconst HazardDetection = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [jsonData, setJsonData] = useState(null);\n  const [hazards, setHazards] = useState<Hazard[]>([]);\n  const [safetyText, setSafetyText] = useState(\"\");\n  const [mitigations, setMitigations] = useState<string[]>([]);\n  const [showJsonContext, setShowJsonContext] = useState(false);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]; // Optional chaining in case no file is selected\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = (loadEvent) => {\n        try {\n          const json = JSON.parse(loadEvent.target?.result as string); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  \n\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n  };\n  \n\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const file = event.dataTransfer.files[0]; // Access the first file\n    if (file.type === \"application/json\") {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = (loadEvent) => {\n        try {\n          const json = JSON.parse(loadEvent.target?.result as string); // Cast the result to a string\n          setJsonData(json);\n          console.log(\"Parsed JSON Data:\", json);\n        } catch (error) {\n          console.error(\"Error parsing JSON:\", error);\n        }\n      };\n      reader.readAsText(file);\n    } else {\n      console.error(\"Only JSON files are accepted\");\n    }\n  };\n  \n  const detectHazards = (data: any) => {\n    const hazards: Hazard[] = [];\n    const stack: { obj: any; path: string }[] = [{ obj: data, path: \"\" }]; // Stack for deep traversal\n  \n    // Traverse the object tree\n    while (stack.length > 0) {\n      const { obj, path } = stack.pop()!; // Get current object and path\n  \n      if (typeof obj !== \"object\" || obj === null) continue;\n  \n      Object.keys(obj).forEach((key) => {\n        const newPath = path ? `${path}.${key}` : key; // Construct new path for the object\n  \n        // Check if we are at the \"Relations\" array\n        if (key.toLowerCase() === \"relations\" && Array.isArray(obj[key])) {\n          obj[key].forEach((relation: any, index: number) => {\n            // Look for \"Hazards\" in the relations\n            if (relation[0] === \"Hazards\" && relation[1]?.Properties) {\n              console.log(`Found Hazards at path: ${newPath}.Relations[${index}]`);\n  \n              // Extract the Properties array\n              const properties = relation[1].Properties;\n  \n              // Initialize a new hazard object with default values\n              const hazard: Hazard = {\n                path: `${newPath}.Relations[${index}].Hazards`,\n                name: \"\",\n                type: \"\",\n                description: \"\",\n                riskLevel: \"\",\n                targetType: \"\"\n              };\n  \n              // Loop through the properties array to extract hazard details\n              properties.forEach((property: any) => {\n                const [propertyKey, propertyValue] = property;\n                if (propertyValue && propertyValue.LocalValue) {\n                  // Extract LocalValue for each key in the Properties array\n                  if (propertyKey === \"Name\") {\n                    hazard.name = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Description\") {\n                    hazard.description = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Type\") {\n                    hazard.type = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"Risk\") {\n                    hazard.riskLevel = propertyValue.LocalValue;\n                  }\n                  if (propertyKey === \"TargetType\") {\n                    hazard.targetType = propertyValue.LocalValue;\n                  }\n                  // Log the property and its LocalValue for debugging\n                  console.log(`Key: ${propertyKey}, LocalValue: ${propertyValue.LocalValue}`);\n                }\n              });\n  \n              // Add the hazard to the array\n              hazards.push(hazard);\n            }\n          });\n        }\n  \n        // Continue traversing if object or array found\n        if (typeof obj[key] === \"object\" && obj[key] !== null) {\n          stack.push({ obj: obj[key], path: newPath });\n        }\n      });\n    }\n  \n    // Debugging the output to inspect the result\n    console.log(\"Detected Hazards with Detailed Information:\");\n    hazards.forEach(hazard => {\n      console.log(`Hazard Path: ${hazard.path}`);\n      console.log(`Name: ${hazard.name}`);\n      console.log(`Type: ${hazard.type}`);\n      console.log(`Description: ${hazard.description}`);\n      console.log(`Risk Level: ${hazard.riskLevel}`);\n      console.log(`Target Type: ${hazard.targetType}`);\n      console.log('---'); // Separator between hazards\n    });\n  \n    return hazards;\n  };\n    \n\n  \n  const handleDetectHazards = () => {\n    if (jsonData) {\n      const detectedHazards = detectHazards(jsonData); // Pass the updated configuration\n      setHazards(detectedHazards);\n  \n      const safetyText = detectedHazards\n        .map(\n          (hazard, index) =>\n            `${index + 1} - ${hazard.type}:\\n  - ${hazard.description}`\n        )\n        .join(\"\\n\\n\");\n      setSafetyText(safetyText);\n    }\n  };\n\n  const handleGenerateMitigations = async () => {\n    const mitigationsList = await Promise.all(\n      hazards.map(async (hazard) => {\n        const mitigation = await generateMitigations(hazard);\n        return `${hazard.type}: ${mitigation}`;\n      })\n    );\n    setMitigations(mitigationsList);\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>JSON Data Analysis for Hazard Detection</CardTitle>\n          <CardDescription>\n            Upload a JSON file to analyze and generate safety texts for\n            automatic hazard detection.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div\n            className=\"border-2 border-dashed rounded-xl p-4\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n          >\n            <Label>Drag and drop a JSON file or upload from device</Label>\n            <Input type=\"file\" onChange={handleFileChange} accept=\".json\" />\n          </div>\n          {selectedFile && (\n            <div className=\"mt-4\">\n              <Button onClick={() => setShowJsonContext(!showJsonContext)}>\n                {showJsonContext ? \"Hide JSON Context\" : \"View JSON Context\"}\n              </Button>\n              {showJsonContext && (\n                <Textarea\n                  value={JSON.stringify(jsonData, null, 2)}\n                  readOnly\n                  className=\"mt-4\"\n                />\n              )}\n            </div>\n          )}\n          {jsonData && (\n            <div className=\"mt-4\">\n              <Button onClick={handleDetectHazards}>Detect Hazards</Button>\n              {safetyText && (\n                <div style={{ marginTop: \"20px\" }}>\n                  <h2 className=\"text-lg font-bold\">Detected Hazards:</h2>\n                  <Textarea value={safetyText} readOnly style={{width: \"50%\", height: \"150px\", padding: \"10px\", fontSize: \"18px\"}} />\n                </div>\n              )}\n            </div>\n          )}\n          {hazards.length > 0 && (\n            <div className=\"mt-4\">\n              <Button onClick={handleGenerateMitigations}>\n                Generate Mitigations\n              </Button>\n              {mitigations.length > 0 && (\n                <div className=\"mt-4\">\n                  <h2 className=\"text-lg font-bold\">Generated Mitigations:</h2>\n                  <Textarea\n                    value={mitigations.join(\"\\n\\n\")}\n                    readOnly\n                    className=\"mt-4\"\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default HazardDetection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}